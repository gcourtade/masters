# -*- coding: utf-8 -*-
"""kd_from_chemical_shifts.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12CAhrCGAqiGSjJvyn24TvL_kcsIx23yD
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit


def two_site_model(L,KD,Ddmax):
    betaCD_conc = 1.468 # mM 
    P = np.zeros(len(L)) + betaCD_conc 
    return Ddmax * ( (P + L + KD) - ((P + L + KD)**2 - 4*P*L)**0.5 )/(2*P)

def calc_f_bound(L,KD):
  return (L/KD)/(1 + L/KD)

def calc_X_model(X):
    return np.linspace(X.min(),X.max(), num=50)

def jackknife(X,Y):
    assert len(X) == len(Y)
    allidx = np.arange(len(X))
    params =  []
    
    for i in allidx:
        this = np.delete(allidx,i)
        nX = np.take(X, this)
        nY = np.take(Y, this)
        
        popt, pcov = curve_fit(two_site_model, nX , nY)
        params.append(popt)
        X_model = calc_X_model(nX)
        #plt.scatter(nX, nY)
        #plt.plot(X_model, two_site_model(X_model, *popt))
        #plt.title(popt[0])
        #plt.show()
        
    print('jackknife', np.average(np.array(params)[:,0]), np.std(np.array(params)[:,0]))
    return np.array(params)
        


plt.rc('xtick', labelsize=20)
plt.rc('ytick', labelsize=20)
plt.rc('lines', linewidth=3)


 
# write the data in here, Dppm is the distance for H5 in this example
L = np.array([0,0.579358582,1.30355681,1.738075747,2.60711362,3.765830785,5.793585823,21.06758481])
DppmH6 = np.array([0,0,0.00009999,0,0,0.00525,0.00795,0.02955])
DppmH5 = np.array([0,0.00265,0.0133,0.0161,0.0241,0.0294,0.0401,0.13155])
DppmH4 = np.array([0,0.0054,0.0052,0.0054,0.0107,0.0106,0.016,0.0376])
DppmH3 = np.array([0,0,0.0052,0.0053,0.0107,0.0106,0.016,0.0644])
DppmH2 = np.array([0,0,0.0026,0.0054,0.0054,0.0106,0.016,0.043])
DppmH1 = np.array([0,0,0.0002,0,0.0053,0.0052,0.0106,0.0322])

params = jackknife(L,DppmH5)


# this is the fitting of the model
poptH6, pcovH6 = curve_fit(f=two_site_model, xdata=L, ydata=DppmH6)
poptH5, pcovH5 = curve_fit(f=two_site_model, xdata=L, ydata=DppmH5)
poptH4, pcovH4 = curve_fit(f=two_site_model, xdata=L, ydata=DppmH4)
poptH3, pcovH3 = curve_fit(f=two_site_model, xdata=L, ydata=DppmH3)
poptH2, pcovH2 = curve_fit(f=two_site_model, xdata=L, ydata=DppmH2)
poptH1, pcovH1 = curve_fit(f=two_site_model, xdata=L, ydata=DppmH1)

print('Including max [TPA]=21.1 mM')
print('H6: Kd={:.2f} mM; Dmax={:.2f}'.format(*poptH6))
print('H5: Kd={:.2f} mM; Dmax={:.2f}'.format(*poptH5))
print('H4: Kd={:.2f} mM; Dmax={:.2f}'.format(*poptH4))
print('H3: Kd={:.2f} mM; Dmax={:.2f}'.format(*poptH3))
print('H2: Kd={:.2f} mM; Dmax={:.2f}'.format(*poptH2))
print('H1: Kd={:.2f} mM; Dmax={:.2f}'.format(*poptH1))
# define Ligand concentrations for the model
L_model = calc_X_model(L)

# calculate fraction bound
f_boundH6 = calc_f_bound(L_model, KD=poptH6[0])
f_boundH5 = calc_f_bound(L_model, KD=poptH5[0])
f_boundH4 = calc_f_bound(L_model, KD=poptH4[0])
f_boundH3 = calc_f_bound(L_model, KD=poptH3[0])
f_boundH2 = calc_f_bound(L_model, KD=poptH2[0])
f_boundH1 = calc_f_bound(L_model, KD=poptH1[0])
'''
# plotting
plt.plot(L, DppmH5, 'ko', label='data')
plt.plot(L_model, two_site_model(L_model, *popt), 'r--', label='fit')
plt.xlabel('[TPA] \ mM', fontsize=14)
plt.ylabel('$\Delta \delta ^{1}H$ \ ppm', fontsize=14)
plt.legend()
plt.show()
'''
f_bound = calc_f_bound(L_model, KD=63)
plt.plot(L_model, f_bound)
plt.xlabel('[TPA] \ mM', fontsize=14)
plt.ylabel('Fraction bound', fontsize=14)
plt.show()






plt.plot(L, DppmH6, 'go', label='H6', markersize=10)
plt.plot(L_model, two_site_model(L_model, *poptH6), 'g--', label='H6 fit')

plt.plot(L, DppmH5, 'bo', label='H5', markersize=10)
plt.plot(L_model, two_site_model(L_model, *poptH5), 'b--', label='H5 fit')

plt.plot(L, DppmH4, 'yo', label='H4', markersize=10)
plt.plot(L_model, two_site_model(L_model, *poptH4), 'y--', label='H4 fit')

plt.plot(L, DppmH3, 'ro', label='H3', markersize=10)
plt.plot(L_model, two_site_model(L_model, *poptH3), 'r--', label='H3 fit')

plt.plot(L, DppmH2, 'mo', label='H2', markersize=10)
plt.plot(L_model, two_site_model(L_model, *poptH2), 'm--', label='H2 fit')

plt.plot(L, DppmH1, 'ko', label='H1', markersize=10)
plt.plot(L_model, two_site_model(L_model, *poptH1), 'k--', label='H1 fit')

plt.xlabel('[TPA] \ mM', fontsize=40)
plt.ylabel('$\Delta \delta ^{1}H$ \ ppm', fontsize=40)
plt.legend(loc=2, fontsize=30)
plt.show()



#Plotting without max [TPA] / Not relevant here because highest is 7.93 mM and values seem nice

'''
# write the data in here, Dppm is the distance for H5 in this example
L = np.array([0,0.579358582,1.30355681,1.738075747,2.60711362,3.765830785,5.793585823])
DppmH6 = np.array([0,0,0.00009999,0,0,0.00525,0.00795])
DppmH5 = np.array([0,0.00265,0.0133,0.0161,0.0241,0.0294,0.0401])
DppmH4 = np.array([0,0.0054,0.0052,0.0054,0.0107,0.0106,0.016])
DppmH3 = np.array([0,0,0.0052,0.0053,0.0107,0.0106,0.016])
DppmH2 = np.array([0,0,0.0026,0.0054,0.0054,0.0106,0.016])
DppmH1 = np.array([0,0,0.0002,0,0.0053,0.0052,0.0106])





# this is the fitting of the model
poptH6, pcovH6 = curve_fit(f=two_site_model, xdata=L, ydata=DppmH6)
poptH5, pcovH5 = curve_fit(f=two_site_model, xdata=L, ydata=DppmH5)
poptH4, pcovH4 = curve_fit(f=two_site_model, xdata=L, ydata=DppmH4)
poptH3, pcovH3 = curve_fit(f=two_site_model, xdata=L, ydata=DppmH3)
poptH2, pcovH2 = curve_fit(f=two_site_model, xdata=L, ydata=DppmH2)
poptH1, pcovH1 = curve_fit(f=two_site_model, xdata=L, ydata=DppmH1)

print('\nWithout max: [TPA]=21.1 mM')
print('H6: Kd={:.2f} mM; Dmax={:.2f}'.format(*poptH6))
print('H5: Kd={:.2f} mM; Dmax={:.2f}'.format(*poptH5))
print('H4: Kd={:.2f} mM; Dmax={:.2f}'.format(*poptH4))
print('H3: Kd={:.2f} mM; Dmax={:.2f}'.format(*poptH3))
print('H2: Kd={:.2f} mM; Dmax={:.2f}'.format(*poptH2))
print('H1: Kd={:.2f} mM; Dmax={:.2f}'.format(*poptH1))
# define Ligand concentrations for the model
L_model = np.linspace(L.min(),L.max(), num=50)

plt.plot(L, DppmH6, 'go', label='H6', markersize=10)
plt.plot(L_model, two_site_model(L_model, *poptH6), 'g--', label='H6 fit')

plt.plot(L, DppmH5, 'bo', label='H5', markersize=10)
plt.plot(L_model, two_site_model(L_model, *poptH5), 'b--', label='H5 fit')

plt.plot(L, DppmH4, 'yo', label='H4', markersize=10)
plt.plot(L_model, two_site_model(L_model, *poptH4), 'y--', label='H4 fit')

plt.plot(L, DppmH3, 'ro', label='H3', markersize=10)
plt.plot(L_model, two_site_model(L_model, *poptH3), 'r--', label='H3 fit')

plt.plot(L, DppmH2, 'mo', label='H2', markersize=10)
plt.plot(L_model, two_site_model(L_model, *poptH2), 'm--', label='H2 fit')

plt.plot(L, DppmH1, 'ko', label='H1', markersize=10)
plt.plot(L_model, two_site_model(L_model, *poptH1), 'k--', label='H1 fit')

plt.xlabel('[TPA] \ mM', fontsize=40)
plt.ylabel('$\Delta \delta ^{1}H$ \ ppm', fontsize=40)
plt.legend(loc=2, fontsize=30)
plt.show()
'''
